/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package main;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author walth
 */
public class GUIReplicacion extends javax.swing.JFrame {
    
    
    public static Conexion origen = null;
    public static Conexion destino = null;
    private hilo h;
    /**
     * Creates new form GUIReplicacion
     */
    public GUIReplicacion() {
        initComponents();
        this.setLocationRelativeTo(this);
        verTablas();
        paqueamarre();
        CreateTriggers();
        h = new hilo(origen, this.jl_ejec);
        h.start();
    }

    private void paqueamarre(){
        if(destino.puerto.equals("1433")){
            try{
                ResultSet rs = destino.conn.createStatement().executeQuery(sqlvertablas);
                ArrayList<String> tablas = new ArrayList<>();
                while(rs.next()){
                    String NombreTabla = rs.getString(1);
                    if(!NombreTabla.equals("bitacora")){
                        tablas.add(NombreTabla);
                    }
                }
            }catch(Exception e){
                e.printStackTrace();
            }    
        }
    }

    private void verTablas(){
        ArrayList<String> cosos = new ArrayList<>();
        try{
            ResultSet rs = origen.conn.createStatement().executeQuery("SELECT tablas FROM tablas_replicar;");
            while(rs.next()){
                cosos.add(rs.getString(1));
            }
        }catch(Exception e){
            e.printStackTrace();
        }
        if(origen.puerto.equals("3306")){
            try{
                ResultSet rs = origen.conn.createStatement().executeQuery("SHOW TABLES;");
                //Tablas.removeAllItems();
                DefaultListModel modellist = new DefaultListModel<>();
                ArrayList<String> tablas = new ArrayList<>();
                DefaultListModel modellist2 = new DefaultListModel<>();
                while(rs.next()){
                    String NombreTabla = rs.getString(1);
                    if(!NombreTabla.equals("temporal") && !NombreTabla.equals("bitacora") && !NombreTabla.equals("link_destino") && !NombreTabla.equals("tablas_replicar")){
                        if(!cosos.contains(NombreTabla)){
                            tablas.add(NombreTabla);
                        }
                        //Tablas.addItem(NombreTabla);
                    }
                }
                modellist2.addAll(cosos);
                modellist.addAll(tablas);
                JL_SinReplicar.setModel(modellist);
                JL_Replicando.setModel(modellist2);
            }catch(Exception e){
                e.printStackTrace();
            }
        }else{
            try{
                ResultSet rs = origen.conn.createStatement().executeQuery(sqlvertablas);
                DefaultListModel modellist = new DefaultListModel<>();
                ArrayList<String> tablas = new ArrayList<>();
                while(rs.next()){
                    String NombreTabla = rs.getString(1);
                    if(!NombreTabla.equals("bitacora")){
                        tablas.add(NombreTabla);
                    }
                }
                modellist.addAll(tablas);
                JL_SinReplicar.setModel(modellist);
            }catch(Exception e){
                e.printStackTrace();
            }            
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Refresh = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        JL_Replicando = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        JL_SinReplicar = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        BT_EliminarReplicar = new javax.swing.JButton();
        BT_EnviarReplicar = new javax.swing.JButton();
        BT_Guardar = new javax.swing.JButton();
        BT_Cancelar = new javax.swing.JButton();
        jl_ejec = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(153, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel1.setForeground(new java.awt.Color(153, 255, 255));

        Refresh.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                RefreshMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                RefreshMouseReleased(evt);
            }
        });

        JL_Replicando.setModel(new DefaultListModel<String>()
        );
        jScrollPane1.setViewportView(JL_Replicando);

        JL_SinReplicar.setModel(new DefaultListModel<String>()
        );
        jScrollPane2.setViewportView(JL_SinReplicar);

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Sin Replicar");

        jLabel2.setFont(new java.awt.Font("Dialog", 1, 15)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Replicando");

        BT_EliminarReplicar.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        BT_EliminarReplicar.setText("<<");
        BT_EliminarReplicar.setPreferredSize(new java.awt.Dimension(60, 24));
        BT_EliminarReplicar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BT_EliminarReplicarMousePressed(evt);
            }
        });

        BT_EnviarReplicar.setFont(new java.awt.Font("Dialog", 1, 12)); // NOI18N
        BT_EnviarReplicar.setText(">>");
        BT_EnviarReplicar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BT_EnviarReplicarMousePressed(evt);
            }
        });

        BT_Guardar.setBackground(new java.awt.Color(0, 153, 51));
        BT_Guardar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        BT_Guardar.setForeground(new java.awt.Color(204, 204, 204));
        BT_Guardar.setText("Guardar");
        BT_Guardar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BT_GuardarMousePressed(evt);
            }
        });

        BT_Cancelar.setBackground(new java.awt.Color(153, 0, 0));
        BT_Cancelar.setFont(new java.awt.Font("Dialog", 1, 14)); // NOI18N
        BT_Cancelar.setForeground(new java.awt.Color(204, 204, 204));
        BT_Cancelar.setText("Cancelar");
        BT_Cancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                BT_CancelarMousePressed(evt);
            }
        });

        jl_ejec.setText("Ultima Ejecucion:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(Refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(241, 241, 241))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(BT_EliminarReplicar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BT_EnviarReplicar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(67, 67, 67)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 137, Short.MAX_VALUE))
                .addGap(46, 46, 46))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(133, 133, 133)
                        .addComponent(BT_Guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(101, 101, 101)
                        .addComponent(BT_Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jl_ejec, javax.swing.GroupLayout.PREFERRED_SIZE, 388, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(139, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jl_ejec)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(Refresh, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 9, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(44, 44, 44))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(82, 82, 82)
                        .addComponent(BT_EliminarReplicar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(BT_EnviarReplicar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BT_Guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(BT_Cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26))
        );

        Refresh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Images/icono_actualizar.png")));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void RefreshMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RefreshMousePressed
        JL_Replicando.setModel(new DefaultListModel<>());
        verTablas();
        CreateTriggers();
    }//GEN-LAST:event_RefreshMousePressed

    private void BT_EnviarReplicarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BT_EnviarReplicarMousePressed
        int i = JL_SinReplicar.getSelectedIndex();
        if(i == -1)
            return;
        DefaultListModel modellist = (DefaultListModel)JL_SinReplicar.getModel();
        String tabla = (String)modellist.remove(i);
        JL_SinReplicar.setModel(modellist);
        DefaultListModel modelrep =(DefaultListModel)JL_Replicando.getModel();
        modelrep.addElement(tabla);
        JL_Replicando.setModel(modelrep);
    }//GEN-LAST:event_BT_EnviarReplicarMousePressed

    private void BT_EliminarReplicarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BT_EliminarReplicarMousePressed
        int i = JL_Replicando.getSelectedIndex();
        if(i == -1)
            return;
        DefaultListModel modellist = (DefaultListModel)JL_Replicando.getModel();
        String tabla = (String)modellist.remove(i);
        JL_Replicando.setModel(modellist);
        DefaultListModel modelsinrep =(DefaultListModel)JL_SinReplicar.getModel();
        modelsinrep.addElement(tabla);
        JL_SinReplicar.setModel(modelsinrep);
    }//GEN-LAST:event_BT_EliminarReplicarMousePressed

    private void BT_CancelarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BT_CancelarMousePressed
        RefreshMousePressed(evt);
    }//GEN-LAST:event_BT_CancelarMousePressed

    private void BT_GuardarMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_BT_GuardarMousePressed
        DefaultListModel model = (DefaultListModel)JL_Replicando.getModel();
        try{
            origen.conn.createStatement().executeQuery("DROP TABLE IF EXISTS tablas_replicar;");
            origen.conn.createStatement().executeQuery("CREATE TABLE tablas_replicar(tablas varchar(30),create_table varchar(2000));");

        }catch(Exception e){
            e.printStackTrace();
        }
        if(model.isEmpty()){
            try {
                origen.conn.createStatement().executeQuery("DROP EVENT IF EXISTS replicador;");
                File file = new File("./nose.bin");
                file.delete();
            } catch (Exception e) {
                e.printStackTrace();
            }
            JOptionPane.showMessageDialog(this, "Se Guardo Exitosamente");
            return;
        }        
        for(int i = 0; i < model.size(); i++){
            String tabla = (String)model.get(i);
            if(destino.puerto.equals("3306")){
                //ReplicarAMariaDB(tabla);
            }else if(destino.puerto.equals("1433")){
                ReplicarASQLServer(tabla);
                try{
                    ResultSet rs = origen.conn.createStatement().executeQuery("SHOW CREATE TABLE "+ tabla+";");
                    String strcrt = "";
                    if(rs.next())
                        strcrt = rs.getString(2);
                    strcrt = strcrt.substring(0, strcrt.indexOf("ENGINE"));
                    String si = strcrt.replace(tabla, "temporal");
                    if(si.contains("AUTO_INCREMENT"))
                        si = si.replace("AUTO_INCREMENT", "");
                    PreparedStatement ps = origen.conn.prepareStatement("INSERT INTO tablas_replicar (tablas, create_table) VALUES (?,?);");
                    ps.setString(1, tabla);
                    ps.setString(2, si);
                    ps.execute();
                }catch(Exception e){
                    e.printStackTrace();
                }
            }
        }
        
        createEvent();
        JOptionPane.showMessageDialog(this, "Se Guardo Exitosamente");
    }//GEN-LAST:event_BT_GuardarMousePressed

    private void RefreshMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RefreshMouseReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_RefreshMouseReleased

    private void ReplicarAMariaDB(String tableName){
        try{
            if(origen.puerto.equals("1433")){
                ResultSet rs = destino.conn.createStatement().executeQuery("SHOW TABLES WHERE Tables_in_"+destino.basededato+"='"+tableName+"';");
                if(rs.next()){
                    ReplicandoMaria(tableName);
                }else{
                    String sqlatributos = "SELECT DISTINCT c.COLUMN_NAME, c.DATA_TYPE, c.CHARACTER_MAXIMUM_LENGTH, c.IS_NULLABLE,\n"
                    +"  CASE\n"
                    +"    WHEN ku.COLUMN_NAME IS NOT NULL THEN 'Primary Key'\n"
                    +"    ELSE ''\n"
                    +"  END AS CONSTRAINT_TYPE\n"
                    +"FROM INFORMATION_SCHEMA.COLUMNS c\n"
                    +"LEFT JOIN INFORMATION_SCHEMA.KEY_COLUMN_USAGE ku ON c.COLUMN_NAME = ku.COLUMN_NAME\n"
                    +"WHERE c.TABLE_NAME = '"+tableName+"'";
                    //Create Table
                    String sqlcreate = "CREATE TABLE " + tableName + "(";
                    ResultSet rsAtributos = origen.conn.createStatement().executeQuery(sqlatributos);
                    while(rsAtributos.next()){
                        String nombreAtributo = rsAtributos.getString("COLUMN_NAME");
                        String tipoAtributo = rsAtributos.getString("DATA_TYPE");
                        String longitud = rsAtributos.getString("CHARACTER_MAXIMUM_LENGTH");
                        String nulo = rsAtributos.getString("IS_NULLABLE");
                        String primary = rsAtributos.getString("CONSTRAINT_TYPE");
                        sqlcreate += nombreAtributo + " ";
                        if(tipoAtributo.equals("varchar")){
                            sqlcreate += tipoAtributo + "(" + longitud + ") ";
                        }else{
                            sqlcreate += tipoAtributo + " ";
                        }
                        if(nulo.equals("NO")){
                            sqlcreate += "NOT NULL ";
                        }
                        if(primary.equals("Primary Key")){
                            sqlcreate += "PRIMARY KEY ";
                        }
                        sqlcreate += ",";
                    }
                    sqlcreate = sqlcreate.substring(0, sqlcreate.length()-1);
                    sqlcreate += ")";
                    destino.conn.createStatement().execute(sqlcreate);
                    //Create Trigger
                    CreateTriggers();
                    //Replicar
                    ReplicandoMaria(tableName);
                }        
            }
            JOptionPane.showMessageDialog(this, "Replicacion Exitosa");
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    private void ReplicandoMaria(String tableName){
        try {
            String sql = "SELECT * FROM bitacora WHERE tabla='" + tableName + "' AND replicado=0;";
            ResultSet rs2 = origen.conn.createStatement().executeQuery(sql);
            while (rs2.next()) {
                String sqlre = "";
                String stratributos = rs2.getString("atributos");
                String strolddatos = rs2.getString("olddatos");
                String strnewdatos = rs2.getString("newdatos");
                if (strolddatos == null) {
                    strolddatos = "";
                }
                if (strnewdatos == null) {
                    strnewdatos = "";
                }
                String[] atributos = stratributos.split(",");
                String[] olddatos = strolddatos.split(",");
                String[] newdatos = strnewdatos.split(",");
                switch (rs2.getString("accion")) {
                    case "UPDATE":
                        sqlre = "UPDATE " + tableName + " SET ";
                        for (int i = 0; i < atributos.length; i++) {
                            String atributo = atributos[i];
                            String newdato = newdatos[i];
                            sqlre += atributo + "=" + newdato;
                            if (i != atributos.length - 1) {
                                sqlre += ",";
                            }
                        }
                        sqlre += " WHERE ";
                        for (int i = 0; i < atributos.length; i++) {
                            String atributo = atributos[i];
                            String olddato = olddatos[i];
                            sqlre += atributo + "=" + olddato;
                            if (i != atributos.length - 1) {
                                sqlre += " AND ";
                            }
                        }
                        break;
                    case "INSERT INTO":
                        sqlre = "INSERT INTO " + tableName + "(" + rs2.getString("atributos") + ") VALUES (" + rs2.getString("newdatos") + ")";
                        break;
                    case "DELETE":
                        sqlre = "DELETE FROM " + tableName + " WHERE ";
                        for (int i = 0; i < atributos.length; i++) {
                            String atributo = atributos[i];
                            String olddato = olddatos[i];
                            sqlre += atributo + "=" + olddato;
                            if (i != atributos.length - 1) {
                                sqlre += " AND ";
                            }
                        }
                        break;
                }
                destino.conn.createStatement().executeQuery(sqlre);
                origen.conn.createStatement().executeUpdate("UPDATE bitacora SET replicado=1 WHERE id_bitacora=" + rs2.getString("id_bitacora"));
            }      
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void ReplicarASQLServer(String tableName){
        try{
            if(origen.puerto.equals("3306")){
                ResultSet rs = destino.conn.createStatement().executeQuery("SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME='"+tableName+"';");
                if(rs.next()){
                    //ReplicandoSQL(tableName);
                }else{
                    String sqlatributos = "SELECT column_name, data_type, column_type, is_nullable, column_key, character_maximum_length "
                            + "FROM information_schema.columns "
                            + "WHERE table_schema = '"+origen.basededato+"' "
                            + "AND table_name = '"+tableName+"'";
                    //Create Table
                    String sqlcreate = "CREATE TABLE " + tableName + "(";
                    ResultSet rsAtributos = origen.conn.createStatement().executeQuery(sqlatributos);
                    while(rsAtributos.next()){
                        String nombreAtributo = rsAtributos.getString(1);
                        String tipoAtributo = rsAtributos.getString(2);
                        String longitud = rsAtributos.getString(6);
                        String nulo = rsAtributos.getString(4);
                        String primary = rsAtributos.getString(5);
                        sqlcreate += nombreAtributo + " ";
                        if(tipoAtributo.equals("varchar")){
                            sqlcreate += tipoAtributo + "(" + longitud + ") ";
                        }else{
                            sqlcreate += tipoAtributo + " ";
                        }
                        if(nulo.equals("NO")){
                            sqlcreate += "NOT NULL ";
                        }
                        if(primary.equals("PRI")){
                            sqlcreate += "PRIMARY KEY ";
                        }
                        sqlcreate += ",";
                    }
                    sqlcreate = sqlcreate.substring(0, sqlcreate.length()-1);
                    sqlcreate += ")";
                    destino.conn.createStatement().execute(sqlcreate);
                    //Create Trigger
                    //CreateTriggers();
                    //Replicar
                    //ReplicandoSQL(tableName);
                }
                    
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    private void ReplicandoSQL(String tableName){
        try {
            String sql = "SELECT * FROM bitacora WHERE tabla='" + tableName + "' AND replicado=0;";
            ResultSet rs2 = origen.conn.createStatement().executeQuery(sql);
            while (rs2.next()) {
                String sqlre = "";
                String stratributos = rs2.getString("atributos");
                String strolddatos = rs2.getString("olddatos");
                String strnewdatos = rs2.getString("newdatos");
                if (strolddatos == null) {
                    strolddatos = "";
                }
                if (strnewdatos == null) {
                    strnewdatos = "";
                }
                String[] atributos = stratributos.split(",");
                String[] olddatos = strolddatos.split(",");
                String[] newdatos = strnewdatos.split(",");
                switch (rs2.getString("accion")) {
                    case "UPDATE":
                        sqlre = "UPDATE " + tableName + " SET ";
                        for (int i = 0; i < atributos.length; i++) {
                            String atributo = atributos[i];
                            String newdato = newdatos[i];
                            sqlre += atributo + "=" + newdato;
                            if (i != atributos.length - 1) {
                                sqlre += ",";
                            }
                        }
                        sqlre += " WHERE ";
                        for (int i = 0; i < atributos.length; i++) {
                            String atributo = atributos[i];
                            String olddato = olddatos[i];
                            sqlre += atributo + "=" + olddato;
                            if (i != atributos.length - 1) {
                                sqlre += " AND ";
                            }
                        }
                        break;
                    case "INSERT INTO":
                        sqlre = "INSERT INTO " + tableName + "(" + rs2.getString("atributos") + ") VALUES (" + rs2.getString("newdatos") + ")";
                        break;
                    case "DELETE":
                        sqlre = "DELETE FROM " + tableName + " WHERE ";
                        for (int i = 0; i < atributos.length; i++) {
                            String atributo = atributos[i];
                            String olddato = olddatos[i];
                            sqlre += atributo + "=" + olddato;
                            if (i != atributos.length - 1) {
                                sqlre += " AND ";
                            }
                        }
                        break;
                    }
                destino.conn.createStatement().execute(sqlre);
                origen.conn.createStatement().executeUpdate("UPDATE bitacora SET replicado=1 WHERE id_bitacora=" + rs2.getString("id_bitacora"));
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    
    private void CreateTriggers(){
        try{
            Conexion[] conexiones = {origen, destino};
            for(Conexion c : conexiones){
                if(c.puerto.equals("3306")){
                    ResultSet rs = c.conn.createStatement().executeQuery("SHOW TABLES;");
                    while(rs.next()){
                        String tableName = rs.getString(1);
                        if(!tableName.equals("temporal") && !tableName.equals("bitacora") && !tableName.equals("link_destino") && !tableName.equals("tablas_replicar")){
                            String sqlatributos = "SELECT column_name,data_type "
                                    + "FROM information_schema.columns "
                                    + "WHERE table_schema = '"+c.basededato+"' "
                                    + "AND table_name = '"+tableName+"'";
                            ResultSet rsAtributos = c.conn.createStatement().executeQuery(sqlatributos);
                            String nombreAtributos = "";
                            String olddatos = "CONCAT(";
                            String newdatos = "CONCAT(";
                            
                            String oldupdate = "CONCAT(";
                            String newupdate = "CONCAT(";
                            
                            while(rsAtributos.next()){
                                String nombreAtributo = rsAtributos.getString(1);
                                String tipoAtributo = rsAtributos.getString(2);
                                nombreAtributos += nombreAtributo;
                                if(tipoAtributo.equals("varchar")){
                                    olddatos += "'\\'',OLD."+nombreAtributo+",'\\'";
                                    newdatos += "'\\'',NEW."+nombreAtributo+",'\\'";
                                    oldupdate += "'"+nombreAtributo+"=\\'',OLD."+nombreAtributo+",'\\'";
                                    newupdate += "'"+nombreAtributo+"=\\'',NEW."+nombreAtributo+",'\\'";
                                }else{
                                    olddatos += "OLD."+nombreAtributo+",'";
                                    newdatos += "NEW."+nombreAtributo+",'";
                                    oldupdate += "'"+nombreAtributo+"=',OLD."+nombreAtributo+",'";
                                    newupdate += "'"+nombreAtributo+"=',NEW."+nombreAtributo+",'";
                                }
                                if(!rsAtributos.isLast()){
                                    nombreAtributos += ",";
                                    olddatos += ",',";
                                    newdatos += ",',";
                                    oldupdate += "',";
                                    newupdate += ",',";
                                    oldupdate += "' AND ',";                                    
                                }else{
                                    olddatos += "'";
                                    newdatos += "'";
                                    oldupdate += "'";
                                    newupdate += "'";
                                }
                            }
                            olddatos += ")";
                            newdatos += ")";
                            oldupdate += ")";
                            newupdate += ")";
                            String trigger_delete = "CREATE TRIGGER " + tableName + "_after_delete AFTER DELETE ON " + tableName + " FOR EACH ROW BEGIN\n" +
                                    "	INSERT INTO bitacora(accion,tabla,atributos,olddatos,newdatos,replicado)\n VALUES ('DELETE','" + tableName + "','" + nombreAtributos + "'," + oldupdate + ",null,false);\n" +
                                    "END";

                            String trigger_update = "CREATE TRIGGER " + tableName + "_after_update AFTER UPDATE ON " + tableName + " FOR EACH ROW BEGIN\n" +
                                    "	INSERT INTO bitacora(accion,tabla,atributos,olddatos,newdatos,replicado)\n VALUES ('UPDATE','" + tableName + "','" + nombreAtributos + "'," + oldupdate + "," + newupdate + ",false);\n" +
                                    "END";
                            String trigger_insert = "CREATE TRIGGER " + tableName + "_after_insert AFTER INSERT ON " + tableName + " FOR EACH ROW BEGIN\n" +
                                    "	INSERT INTO bitacora(accion,tabla,atributos,olddatos,newdatos,replicado)\n VALUES ('INSERT INTO','" + tableName + "','" + nombreAtributos + "',null," + newdatos + ",false);\n" +
                                    "END";
                            String sqltriggers = "SELECT TRIGGER_NAME " 
                                    + "FROM information_schema.triggers" 
                                    + " WHERE event_object_schema = '" + c.basededato + "' " 
                                    + " AND event_object_table = '" + tableName +"'";
                            ResultSet rstriggers = c.conn.createStatement().executeQuery(sqltriggers);
                            ArrayList<String> triggers = new ArrayList<>();
                            while(rstriggers.next()){
                                triggers.add(rstriggers.getString(1));
                            }
                            if(!triggers.contains(tableName + "_after_delete")){
                                c.conn.createStatement().execute(trigger_delete);
                            }
                            if(!triggers.contains(tableName + "_after_insert")){
                                c.conn.createStatement().execute(trigger_insert);
                            }                            
                            if(!triggers.contains(tableName + "_after_update")){
                                c.conn.createStatement().execute(trigger_update);
                            }

                        }
                    }
                }
            }
        }catch(Exception e){
            e.printStackTrace();
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton BT_Cancelar;
    private javax.swing.JButton BT_EliminarReplicar;
    private javax.swing.JButton BT_EnviarReplicar;
    private javax.swing.JButton BT_Guardar;
    private javax.swing.JList<String> JL_Replicando;
    private javax.swing.JList<String> JL_SinReplicar;
    private javax.swing.JButton Refresh;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel jl_ejec;
    // End of variables declaration//GEN-END:variables

    private String sqlvertablas = "SELECT table_name FROM information_schema.tables WHERE table_type = 'BASE TABLE'";
    
    private void createEvent(){
        DefaultListModel model = (DefaultListModel)JL_Replicando.getModel();
        String tablasCondicion = "(";
        ArrayList<String> cosos = new ArrayList<>();
        for(int i = 0; i < model.size(); i++){
            String tabla = (String)model.get(i);
            tablasCondicion += "tabla='"+tabla;
            cosos.add(tabla);
            if(i != model.size()-1){
                tablasCondicion += "' OR ";
            }else{
                tablasCondicion += "')";
            }
        }
        try{
            File file = new File("./nose.bin");
            if(file.exists()){
                file.delete();
            }
            file.createNewFile();
            FileOutputStream fis = new FileOutputStream(file);
            ObjectOutputStream ois = new ObjectOutputStream(fis);
            ois.writeObject(cosos);
            ois.close();
            fis.close();
        }catch(Exception e){
            e.printStackTrace();
        }
        String query = 
            "CREATE EVENT replicador\n" +
            "ON SCHEDULE\n" +
            "EVERY 2 SECOND\n" +
            "ON COMPLETION NOT PRESERVE\n" +
            "ENABLE\n" +
            "COMMENT ''\n" +
            "DO BEGIN\n"
                + "DROP TABLE IF EXISTS temporal;\n" +
            "SET @id := (SELECT id_bitacora FROM bitacora WHERE replicado=0 AND "+tablasCondicion+" LIMIT 1);\n" +
            "SET @accion := (SELECT accion FROM bitacora WHERE id_bitacora=@id);\n" +
            "SET @tabla := (SELECT tabla FROM bitacora WHERE id_bitacora=@id);\n"+
            "SET @atributos := (SELECT atributos FROM bitacora WHERE id_bitacora=@id);\n" +
            "SET @olddatos := (SELECT olddatos FROM bitacora WHERE id_bitacora=@id);\n" +
            "SET @newdatos := (SELECT newdatos FROM bitacora WHERE id_bitacora=@id);\n" +
            "SET @conn := (SELECT link FROM link_destino);\n" + 
            "SET @crttable := (SELECT create_table FROM tablas_replicar WHERE tablas=@tabla);\n" +
            "SET @create_table_query := CONCAT(@crttable,' ENGINE=CONNECT, TABLE_TYPE=ODBC, TABNAME=\\'', @tabla,'\\' CONNECTION=\\'', @conn,'\\'');\n" +
            "PREPARE create_table_stmt FROM @create_table_query;\n" +
            "EXECUTE create_table_stmt;\n" +
            "DEALLOCATE PREPARE create_table_stmt;\n"+
            "IF STRCMP(@accion,'INSERT INTO') = 0 THEN\n" +
            "SET @querybase := CONCAT('INSERT INTO temporal (',@atributos,') VALUES (',@newdatos,');');\n" +
            "ELSEIF STRCMP(@accion,'UPDATE') = 0 THEN\n" +
            "SET @querybase := CONCAT('UPDATE temporal SET ',@newdatos,' WHERE ', @olddatos);\n" +
            "ELSE\n" +
            "SET @querybase := CONCAT('DELETE FROM temporal WHERE ',@olddatos);\n" +
            "END IF;\n" +
            "PREPARE coso_stmt FROM @querybase;\n" +
            "EXECUTE coso_stmt;\n" +
            "DEALLOCATE PREPARE coso_stmt;\n" +
            "UPDATE bitacora SET replicado=1 WHERE id_bitacora=@id;\n" +
            "DROP TABLE IF EXISTS temporal;\n" +
            "END";
        try{
            origen.conn.createStatement().executeQuery("DROP EVENT replicador;");
        }catch(Exception e){
            //e.printStackTrace();
        }        
        try{
            PreparedStatement ps = origen.conn.prepareStatement(query);
            ps.execute();            
            //origen.conn.createStatement().execute(query);
        }catch(Exception e){
            e.printStackTrace();
        }
        
    }
}
